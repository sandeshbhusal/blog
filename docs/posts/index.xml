<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sandesh Bhusal&#39;s blog</title>
    <link>https://sandeshbhusal.github.io/blog/posts/</link>
    <description>Recent content in Posts on Sandesh Bhusal&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Mar 2019 07:02:54 +0545</lastBuildDate>
    
	<atom:link href="https://sandeshbhusal.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computer Graphics :: Project Overview</title>
      <link>https://sandeshbhusal.github.io/blog/posts/computer-graphics-project-overview/</link>
      <pubDate>Mon, 04 Mar 2019 07:02:54 +0545</pubDate>
      
      <guid>https://sandeshbhusal.github.io/blog/posts/computer-graphics-project-overview/</guid>
      <description>IOE Pulchowk Campus assigns a project each year, for the practical fulfillment in Computer Graphics course allocated in the first semester of third year (fifth semester). It is for the same, that we decided to create a 3D rendering engine depicting a human face. The engine would be written in C++ and backed by OpenGL. However, none of the functions within OpenGL could be used, as the specification of the project clearly stated that we were to use only the 2D point plotting function available as the OpenGL standard library.</description>
    </item>
    
    <item>
      <title>Lru Cache :: Data Structure</title>
      <link>https://sandeshbhusal.github.io/blog/posts/lru_cache/</link>
      <pubDate>Sat, 29 Dec 2018 07:27:44 +0545</pubDate>
      
      <guid>https://sandeshbhusal.github.io/blog/posts/lru_cache/</guid>
      <description>LRU caches are one of the most interesting data structures I have encountered so far. LRU refers to Least Recently Updated, which gives the name to the data structure. Caching is a mechanism that is used to make frequent access of data quick. Caching encompasses two types of accessibility: Temporal and Spatial.
If data within a small range of memory addresses is to be frequently brought into the processor, then spatial caching is used.</description>
    </item>
    
    <item>
      <title>Bloom Filters</title>
      <link>https://sandeshbhusal.github.io/blog/posts/bloom-filter/</link>
      <pubDate>Wed, 19 Dec 2018 12:14:36 +0545</pubDate>
      
      <guid>https://sandeshbhusal.github.io/blog/posts/bloom-filter/</guid>
      <description>Bloom Filters are a great way of satisfying negatives.
Bloom filters are probabilistic data structures, that are used to find out if a certain given element lies within a set or not. Or more precisely, to find out if a particular given element definitely DOES NOT lie within a given set. This characteristic of bloom filters is exploited in various places, primarily, when implementing web crawlers. This article is meant to be an introduction to Bloom Filters.</description>
    </item>
    
    <item>
      <title>Implementing Dictionary using a Trie</title>
      <link>https://sandeshbhusal.github.io/blog/posts/tries-in-c&#43;&#43;/</link>
      <pubDate>Wed, 19 Dec 2018 08:11:50 +0545</pubDate>
      
      <guid>https://sandeshbhusal.github.io/blog/posts/tries-in-c&#43;&#43;/</guid>
      <description>Implementation of Tries in C++ From Wikipedia:
In computer science, a Trie is a type of search tree used to represent the retrieval of data (thus the name Trie). It&amp;rsquo;s an ordered data structure that is based on the prefix of a string.
Thus, basically, a trie is a search tree that contains the information about a particular string. However, a trie can contain information also about the prefix and suffix informations on the string.</description>
    </item>
    
  </channel>
</rss>